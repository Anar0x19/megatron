PRAGMA foreign_keys=ON;

drop table if exists nodes;
create table nodes 
(
    id PRIMARY KEY,
    type int8,
    url_name text,
    owner blob,
    url blob,
    accessmode integer,
    created datetime ,
    modified datetime ,
    parent integer
);
drop trigger if exists on_delete_node;
CREATE TRIGGER on_delete_node before delete ON nodes
BEGIN

    delete from nodes where id=old.parent;
END;

insert into nodes(id,url_name) values(0,'root');

drop table if exists allowed_users;
create table allowed_users
(
    refid INTEGER,
    user blob,
    foreign key(refid) references nodes(id) ON DELETE CASCADE
);
drop table if exists files;

create table files
(
    refid INTEGER,

    description blob,
    displayName blob,
    thumbnail_image blob,
    thumbnail_image_ct blob,

    image blob,
    image_ct blob,
    size integer,
    blocksize integer,
    foreign key(refid) references nodes(id) ON DELETE CASCADE
);
drop table if exists pipes;
create table pipes
(
    refid INTEGER,

    description blob,
    displayName blob,
    thumbnail_image blob,
    thumbnail_image_ct blob,

    image blob,
    image_ct blob,

    foreign key(refid) references nodes(id) ON DELETE CASCADE
);


drop table if exists directories;
create table directories
(
    refid INTEGER,

    description blob,
    displayName blob,
    thumbnail_image blob,
    thumbnail_image_ct blob,

    foreign key(refid) references nodes(id) ON DELETE CASCADE
);
insert into directories(refid) values(0);
drop table if exists symlinks;
create table symlinks
(
    refid INTEGER,
    linked_to_url blob,
    foreign key(refid) references nodes(id) ON DELETE CASCADE
);


